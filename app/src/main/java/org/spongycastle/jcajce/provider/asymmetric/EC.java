package org.spongycastle.jcajce.provider.asymmetric;

import defpackage.k00;
import java.util.HashMap;

public final class EC {
    public static final HashMap a;

    /* loaded from: /data/np/file-convert/202407040258302d6a1ff8-5736-41ea-8de1-439ecec53547/202407040258302d6a1ff8-5736-41ea-8de1-439ecec53547.dex */
    public static class Mappings extends m7 {
        @Override // defpackage.v3
        public void configure(bf bfVar) {
            ua uaVar = (ua) bfVar;
            uaVar.a("AlgorithmParameters.EC", "org.spongycastle.jcajce.provider.asymmetric.ec.AlgorithmParametersSpi");
            HashMap hashMap = EC.a;
            uaVar.b("KeyAgreement.ECDH", hashMap);
            uaVar.a("KeyAgreement.ECDH", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DH");
            uaVar.b("KeyAgreement.ECDHC", hashMap);
            uaVar.a("KeyAgreement.ECDHC", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHC");
            uaVar.b("KeyAgreement.ECCDH", hashMap);
            uaVar.a("KeyAgreement.ECCDH", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHC");
            StringBuilder sb = new StringBuilder();
            sb.append("KeyAgreement.");
            o oVar = l81.H;
            sb.append(oVar);
            uaVar.a(sb.toString(), "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHwithSHA1KDFAndSharedInfo");
            StringBuilder sb2 = new StringBuilder();
            sb2.append("KeyAgreement.");
            o oVar2 = l81.I;
            sb2.append(oVar2);
            uaVar.a(sb2.toString(), "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$CDHwithSHA1KDFAndSharedInfo");
            StringBuilder sb3 = new StringBuilder();
            sb3.append("KeyAgreement.");
            o oVar3 = sm0.H;
            sb3.append(oVar3);
            uaVar.a(sb3.toString(), "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHwithSHA224KDFAndSharedInfo");
            StringBuilder sb4 = new StringBuilder();
            sb4.append("KeyAgreement.");
            o oVar4 = sm0.L;
            sb4.append(oVar4);
            uaVar.a(sb4.toString(), "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$CDHwithSHA224KDFAndSharedInfo");
            StringBuilder sb5 = new StringBuilder();
            sb5.append("KeyAgreement.");
            o oVar5 = sm0.I;
            sb5.append(oVar5);
            uaVar.a(sb5.toString(), "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHwithSHA256KDFAndSharedInfo");
            StringBuilder sb6 = new StringBuilder();
            sb6.append("KeyAgreement.");
            o oVar6 = sm0.M;
            sb6.append(oVar6);
            uaVar.a(sb6.toString(), "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$CDHwithSHA256KDFAndSharedInfo");
            StringBuilder sb7 = new StringBuilder();
            sb7.append("KeyAgreement.");
            o oVar7 = sm0.J;
            sb7.append(oVar7);
            uaVar.a(sb7.toString(), "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHwithSHA384KDFAndSharedInfo");
            StringBuilder sb8 = new StringBuilder();
            sb8.append("KeyAgreement.");
            o oVar8 = sm0.N;
            sb8.append(oVar8);
            uaVar.a(sb8.toString(), "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$CDHwithSHA384KDFAndSharedInfo");
            StringBuilder sb9 = new StringBuilder();
            sb9.append("KeyAgreement.");
            o oVar9 = sm0.K;
            sb9.append(oVar9);
            uaVar.a(sb9.toString(), "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHwithSHA512KDFAndSharedInfo");
            StringBuilder sb10 = new StringBuilder();
            sb10.append("KeyAgreement.");
            o oVar10 = sm0.O;
            sb10.append(oVar10);
            uaVar.a(sb10.toString(), "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$CDHwithSHA512KDFAndSharedInfo");
            uaVar.a("KeyAgreement.ECDHWITHSHA1KDF", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHwithSHA1KDF");
            uaVar.a("KeyAgreement.ECCDHWITHSHA1CKDF", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHwithSHA1CKDF");
            uaVar.a("KeyAgreement.ECCDHWITHSHA256CKDF", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHwithSHA256CKDF");
            uaVar.a("KeyAgreement.ECCDHWITHSHA384CKDF", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHwithSHA384CKDF");
            uaVar.a("KeyAgreement.ECCDHWITHSHA512CKDF", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHwithSHA512CKDF");
            o oVar11 = l81.f;
            registerOid(uaVar, oVar11, "EC", new k00.a());
            registerOid(uaVar, oVar2, "EC", new k00.a());
            o oVar12 = l81.J;
            registerOid(uaVar, oVar12, "ECMQV", new k00.b());
            registerOid(uaVar, oVar3, "EC", new k00.a());
            registerOid(uaVar, oVar4, "EC", new k00.a());
            registerOid(uaVar, oVar5, "EC", new k00.a());
            registerOid(uaVar, oVar6, "EC", new k00.a());
            registerOid(uaVar, oVar7, "EC", new k00.a());
            registerOid(uaVar, oVar8, "EC", new k00.a());
            registerOid(uaVar, oVar9, "EC", new k00.a());
            registerOid(uaVar, oVar10, "EC", new k00.a());
            registerOidAlgorithmParameters(uaVar, oVar11, "EC");
            registerOidAlgorithmParameters(uaVar, oVar, "EC");
            registerOidAlgorithmParameters(uaVar, oVar2, "EC");
            registerOidAlgorithmParameters(uaVar, oVar3, "EC");
            registerOidAlgorithmParameters(uaVar, oVar4, "EC");
            registerOidAlgorithmParameters(uaVar, oVar5, "EC");
            registerOidAlgorithmParameters(uaVar, oVar6, "EC");
            registerOidAlgorithmParameters(uaVar, oVar7, "EC");
            registerOidAlgorithmParameters(uaVar, oVar8, "EC");
            registerOidAlgorithmParameters(uaVar, oVar9, "EC");
            registerOidAlgorithmParameters(uaVar, oVar10, "EC");
            if (!hg0.a("org.spongycastle.ec.disable_mqv")) {
                uaVar.a("KeyAgreement.ECMQV", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQV");
                uaVar.a("KeyAgreement.ECMQVWITHSHA1CKDF", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA1CKDF");
                uaVar.a("KeyAgreement.ECMQVWITHSHA224CKDF", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA224CKDF");
                uaVar.a("KeyAgreement.ECMQVWITHSHA256CKDF", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA256CKDF");
                uaVar.a("KeyAgreement.ECMQVWITHSHA384CKDF", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA384CKDF");
                uaVar.a("KeyAgreement.ECMQVWITHSHA512CKDF", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA512CKDF");
                uaVar.a("KeyAgreement." + oVar12, "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA1KDFAndSharedInfo");
                StringBuilder sb11 = new StringBuilder();
                sb11.append("KeyAgreement.");
                o oVar13 = sm0.P;
                sb11.append(oVar13);
                uaVar.a(sb11.toString(), "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA224KDFAndSharedInfo");
                StringBuilder sb12 = new StringBuilder();
                sb12.append("KeyAgreement.");
                o oVar14 = sm0.Q;
                sb12.append(oVar14);
                uaVar.a(sb12.toString(), "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA256KDFAndSharedInfo");
                StringBuilder sb13 = new StringBuilder();
                sb13.append("KeyAgreement.");
                o oVar15 = sm0.R;
                sb13.append(oVar15);
                uaVar.a(sb13.toString(), "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA384KDFAndSharedInfo");
                StringBuilder sb14 = new StringBuilder();
                sb14.append("KeyAgreement.");
                o oVar16 = sm0.S;
                sb14.append(oVar16);
                uaVar.a(sb14.toString(), "org.spongycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA512KDFAndSharedInfo");
                registerOid(uaVar, oVar, "EC", new k00.a());
                registerOidAlgorithmParameters(uaVar, oVar12, "EC");
                registerOid(uaVar, oVar13, "ECMQV", new k00.b());
                registerOidAlgorithmParameters(uaVar, oVar14, "EC");
                registerOid(uaVar, oVar14, "ECMQV", new k00.b());
                registerOidAlgorithmParameters(uaVar, oVar13, "EC");
                registerOid(uaVar, oVar15, "ECMQV", new k00.b());
                registerOidAlgorithmParameters(uaVar, oVar15, "EC");
                registerOid(uaVar, oVar16, "ECMQV", new k00.b());
                registerOidAlgorithmParameters(uaVar, oVar16, "EC");
                uaVar.a("KeyFactory.ECMQV", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECMQV");
                uaVar.a("KeyPairGenerator.ECMQV", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$ECMQV");
            }
            uaVar.a("KeyFactory.EC", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$EC");
            uaVar.a("KeyFactory.ECDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECDSA");
            uaVar.a("KeyFactory.ECDH", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECDH");
            uaVar.a("KeyFactory.ECDHC", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECDHC");
            uaVar.a("KeyPairGenerator.EC", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$EC");
            uaVar.a("KeyPairGenerator.ECDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$ECDSA");
            uaVar.a("KeyPairGenerator.ECDH", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$ECDH");
            uaVar.a("KeyPairGenerator.ECDHWITHSHA1KDF", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$ECDH");
            uaVar.a("KeyPairGenerator.ECDHC", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$ECDHC");
            uaVar.a("KeyPairGenerator.ECIES", "org.spongycastle.jcajce.provider.asymmetric.ec.KeyPairGeneratorSpi$ECDH");
            uaVar.a("Cipher.ECIES", "org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher$ECIES");
            uaVar.a("Cipher.ECIESwithAES-CBC", "org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher$ECIESwithAESCBC");
            uaVar.a("Cipher.ECIESWITHAES-CBC", "org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher$ECIESwithAESCBC");
            uaVar.a("Cipher.ECIESwithDESEDE-CBC", "org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher$ECIESwithDESedeCBC");
            uaVar.a("Cipher.ECIESWITHDESEDE-CBC", "org.spongycastle.jcajce.provider.asymmetric.ec.IESCipher$ECIESwithDESedeCBC");
            uaVar.a("Signature.ECDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA");
            uaVar.a("Signature.NONEwithECDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSAnone");
            uaVar.a("Alg.Alias.Signature.SHA1withECDSA", "ECDSA");
            uaVar.a("Alg.Alias.Signature.ECDSAwithSHA1", "ECDSA");
            uaVar.a("Alg.Alias.Signature.SHA1WITHECDSA", "ECDSA");
            uaVar.a("Alg.Alias.Signature.ECDSAWITHSHA1", "ECDSA");
            uaVar.a("Alg.Alias.Signature.SHA1WithECDSA", "ECDSA");
            uaVar.a("Alg.Alias.Signature.ECDSAWithSHA1", "ECDSA");
            uaVar.a("Alg.Alias.Signature.1.2.840.10045.4.1", "ECDSA");
            uaVar.a("Alg.Alias.Signature." + fw0.a, "ECDSA");
            uaVar.a("Signature.ECDDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA");
            uaVar.a("Signature.SHA1WITHECDDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA");
            uaVar.a("Signature.SHA224WITHECDDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA224");
            uaVar.a("Signature.SHA256WITHECDDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA256");
            uaVar.a("Signature.SHA384WITHECDDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA384");
            uaVar.a("Signature.SHA512WITHECDDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSA512");
            uaVar.a("Signature.SHA3-224WITHECDDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSASha3_224");
            uaVar.a("Signature.SHA3-256WITHECDDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSASha3_256");
            uaVar.a("Signature.SHA3-384WITHECDDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSASha3_384");
            uaVar.a("Signature.SHA3-512WITHECDDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSASha3_512");
            uaVar.a("Alg.Alias.Signature.DETECDSA", "ECDDSA");
            uaVar.a("Alg.Alias.Signature.SHA1WITHDETECDSA", "SHA1WITHECDDSA");
            uaVar.a("Alg.Alias.Signature.SHA224WITHDETECDSA", "SHA224WITHECDDSA");
            uaVar.a("Alg.Alias.Signature.SHA256WITHDETECDSA", "SHA256WITHECDDSA");
            uaVar.a("Alg.Alias.Signature.SHA384WITHDETECDSA", "SHA384WITHECDDSA");
            uaVar.a("Alg.Alias.Signature.SHA512WITHDETECDSA", "SHA512WITHECDDSA");
            addSignatureAlgorithm(uaVar, "SHA224", "ECDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA224", l81.g);
            addSignatureAlgorithm(uaVar, "SHA256", "ECDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA256", l81.h);
            addSignatureAlgorithm(uaVar, "SHA384", "ECDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA384", l81.i);
            addSignatureAlgorithm(uaVar, "SHA512", "ECDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSA512", l81.j);
            addSignatureAlgorithm(uaVar, "SHA3-224", "ECDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSASha3_224", z60.g);
            addSignatureAlgorithm(uaVar, "SHA3-256", "ECDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSASha3_256", z60.h);
            addSignatureAlgorithm(uaVar, "SHA3-384", "ECDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSASha3_384", z60.i);
            addSignatureAlgorithm(uaVar, "SHA3-512", "ECDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSASha3_512", z60.j);
            addSignatureAlgorithm(uaVar, "RIPEMD160", "ECDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSARipeMD160", fw0.b);
            uaVar.a("Signature.SHA1WITHECNR", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR");
            uaVar.a("Signature.SHA224WITHECNR", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR224");
            uaVar.a("Signature.SHA256WITHECNR", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR256");
            uaVar.a("Signature.SHA384WITHECNR", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR384");
            uaVar.a("Signature.SHA512WITHECNR", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecNR512");
            addSignatureAlgorithm(uaVar, "SHA1", "CVC-ECDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA", dn.a);
            addSignatureAlgorithm(uaVar, "SHA224", "CVC-ECDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA224", dn.b);
            addSignatureAlgorithm(uaVar, "SHA256", "CVC-ECDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA256", dn.c);
            addSignatureAlgorithm(uaVar, "SHA384", "CVC-ECDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA384", dn.d);
            addSignatureAlgorithm(uaVar, "SHA512", "CVC-ECDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA512", dn.e);
            addSignatureAlgorithm(uaVar, "SHA1", "PLAIN-ECDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA", d9.a);
            addSignatureAlgorithm(uaVar, "SHA224", "PLAIN-ECDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA224", d9.b);
            addSignatureAlgorithm(uaVar, "SHA256", "PLAIN-ECDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA256", d9.c);
            addSignatureAlgorithm(uaVar, "SHA384", "PLAIN-ECDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA384", d9.d);
            addSignatureAlgorithm(uaVar, "SHA512", "PLAIN-ECDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecCVCDSA512", d9.e);
            addSignatureAlgorithm(uaVar, "RIPEMD160", "PLAIN-ECDSA", "org.spongycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecPlainDSARP160", d9.f);
        }
    }

    static {
        HashMap hashMap = new HashMap();
        a = hashMap;
        hashMap.put("SupportedKeyClasses", "java.security.interfaces.ECPublicKey|java.security.interfaces.ECPrivateKey");
        hashMap.put("SupportedKeyFormats", "PKCS#8|X.509");
    }
}