package defpackage;

import android.net.Uri;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/* renamed from: ik1  reason: default package */
public final class ik1 implements pk1 {
    public static final int[] Q = {5, 4, 12, 8, 3, 10, 9, 11, 6, 2, 0, 1, 7, 16, 15, 14};
    public static final fx2 R = new fx2(n9.V);
    public static final fx2 S = new fx2(g9.Q);
    public nw4 P;

    /* JADX WARN: Code restructure failed: missing block: B:238:0x035a, code lost:
        if (r3 == r4) goto L23;
     */
    /* JADX WARN: Code restructure failed: missing block: B:239:0x035c, code lost:
        b(r3, r0);
     */
    /* JADX WARN: Removed duplicated region for block: B:100:0x016f A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:103:0x017a A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:106:0x0184 A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:109:0x018f A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:112:0x019a A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:115:0x01a5 A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:120:0x01b3  */
    /* JADX WARN: Removed duplicated region for block: B:121:0x01b4  */
    /* JADX WARN: Removed duplicated region for block: B:122:0x01b7  */
    /* JADX WARN: Removed duplicated region for block: B:123:0x01ba  */
    /* JADX WARN: Removed duplicated region for block: B:124:0x01bd  */
    /* JADX WARN: Removed duplicated region for block: B:125:0x01c0  */
    /* JADX WARN: Removed duplicated region for block: B:126:0x01c3  */
    /* JADX WARN: Removed duplicated region for block: B:127:0x01c6  */
    /* JADX WARN: Removed duplicated region for block: B:128:0x01c9  */
    /* JADX WARN: Removed duplicated region for block: B:129:0x01cc  */
    /* JADX WARN: Removed duplicated region for block: B:130:0x01ce  */
    /* JADX WARN: Removed duplicated region for block: B:131:0x01d0  */
    /* JADX WARN: Removed duplicated region for block: B:132:0x01d3  */
    /* JADX WARN: Removed duplicated region for block: B:133:0x01d5  */
    /* JADX WARN: Removed duplicated region for block: B:134:0x01d7  */
    /* JADX WARN: Removed duplicated region for block: B:135:0x01d9  */
    /* JADX WARN: Removed duplicated region for block: B:136:0x01db  */
    /* JADX WARN: Removed duplicated region for block: B:139:0x01e0 A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:142:0x01e9  */
    /* JADX WARN: Removed duplicated region for block: B:143:0x01eb A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:242:0x0364 A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:31:0x0072  */
    /* JADX WARN: Removed duplicated region for block: B:36:0x007d  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0086  */
    /* JADX WARN: Removed duplicated region for block: B:40:0x0088 A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:43:0x0094 A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:46:0x00a0 A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:49:0x00ac A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:52:0x00b8 A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:55:0x00c3 A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:58:0x00ce A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:61:0x00d9 A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:64:0x00e5 A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:67:0x00f1 A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:70:0x00fd A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:73:0x0109 A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:76:0x0114 A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:79:0x011f A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:82:0x012a A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:85:0x0136 A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:88:0x0142 A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:91:0x014e A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:94:0x0159 A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    /* JADX WARN: Removed duplicated region for block: B:97:0x0164 A[Catch: all -> 0x037e, TryCatch #0 {, blocks: (B:4:0x0003, B:6:0x0018, B:9:0x001f, B:139:0x01e0, B:140:0x01e3, B:239:0x035c, B:240:0x035f, B:242:0x0364, B:245:0x036a, B:246:0x036d, B:247:0x0370, B:143:0x01eb, B:145:0x01f3, B:148:0x01fd, B:151:0x0208, B:153:0x0210, B:156:0x021a, B:159:0x0225, B:162:0x0230, B:165:0x023b, B:167:0x0243, B:169:0x024b, B:172:0x0255, B:174:0x0263, B:177:0x026d, B:180:0x0278, B:182:0x0280, B:184:0x028e, B:186:0x029c, B:189:0x02ac, B:191:0x02ba, B:194:0x02c4, B:196:0x02cc, B:198:0x02d4, B:200:0x02dc, B:203:0x02e6, B:205:0x02ee, B:208:0x02fd, B:210:0x0305, B:213:0x030e, B:215:0x0316, B:218:0x031f, B:220:0x0327, B:223:0x0330, B:13:0x003b, B:37:0x007f, B:38:0x0083, B:119:0x01b0, B:40:0x0088, B:43:0x0094, B:46:0x00a0, B:49:0x00ac, B:52:0x00b8, B:55:0x00c3, B:58:0x00ce, B:61:0x00d9, B:64:0x00e5, B:67:0x00f1, B:70:0x00fd, B:73:0x0109, B:76:0x0114, B:79:0x011f, B:82:0x012a, B:85:0x0136, B:88:0x0142, B:91:0x014e, B:94:0x0159, B:97:0x0164, B:100:0x016f, B:103:0x017a, B:106:0x0184, B:109:0x018f, B:112:0x019a, B:115:0x01a5, B:20:0x0051, B:23:0x005b, B:26:0x0065), top: B:255:0x0003 }] */
    @Override // defpackage.pk1
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final synchronized lk1[] a(Uri uri, Map map) {
        ArrayList arrayList;
        char c;
        char c2;
        int i;
        String lastPathSegment;
        int i2;
        arrayList = new ArrayList(16);
        List list = (List) map.get("Content-Type");
        String str = null;
        if (list != null && !list.isEmpty()) {
            str = (String) list.get(0);
        }
        int i3 = 2;
        if (str != null) {
            ArrayList arrayList2 = mx2.a;
            int hashCode = str.hashCode();
            if (hashCode == -1007807498) {
                if (str.equals("audio/x-flac")) {
                    c = 0;
                    if (c != 0) {
                    }
                    switch (str.hashCode()) {
                        case -2123537834:
                            break;
                        case -1662384011:
                            break;
                        case -1662384007:
                            break;
                        case -1662095187:
                            break;
                        case -1606874997:
                            break;
                        case -1487394660:
                            break;
                        case -1248337486:
                            break;
                        case -1079884372:
                            break;
                        case -1004728940:
                            break;
                        case -387023398:
                            break;
                        case -43467528:
                            break;
                        case 13915911:
                            break;
                        case 187078296:
                            break;
                        case 187078297:
                            break;
                        case 187078669:
                            break;
                        case 187090232:
                            break;
                        case 187091926:
                            break;
                        case 187099443:
                            break;
                        case 1331848029:
                            break;
                        case 1503095341:
                            break;
                        case 1504578661:
                            break;
                        case 1504619009:
                            break;
                        case 1504824762:
                            break;
                        case 1504831518:
                            break;
                        case 1505118770:
                            break;
                        case 2039520277:
                            break;
                    }
                    switch (c2) {
                    }
                    if (i != -1) {
                    }
                    lastPathSegment = uri.getLastPathSegment();
                    if (lastPathSegment != null) {
                    }
                    i3 = -1;
                    int[] iArr = Q;
                    while (i2 < 16) {
                    }
                }
                c = 65535;
                if (c != 0) {
                }
                switch (str.hashCode()) {
                    case -2123537834:
                        break;
                    case -1662384011:
                        break;
                    case -1662384007:
                        break;
                    case -1662095187:
                        break;
                    case -1606874997:
                        break;
                    case -1487394660:
                        break;
                    case -1248337486:
                        break;
                    case -1079884372:
                        break;
                    case -1004728940:
                        break;
                    case -387023398:
                        break;
                    case -43467528:
                        break;
                    case 13915911:
                        break;
                    case 187078296:
                        break;
                    case 187078297:
                        break;
                    case 187078669:
                        break;
                    case 187090232:
                        break;
                    case 187091926:
                        break;
                    case 187099443:
                        break;
                    case 1331848029:
                        break;
                    case 1503095341:
                        break;
                    case 1504578661:
                        break;
                    case 1504619009:
                        break;
                    case 1504824762:
                        break;
                    case 1504831518:
                        break;
                    case 1505118770:
                        break;
                    case 2039520277:
                        break;
                }
                switch (c2) {
                }
                if (i != -1) {
                }
                lastPathSegment = uri.getLastPathSegment();
                if (lastPathSegment != null) {
                }
                i3 = -1;
                int[] iArr2 = Q;
                while (i2 < 16) {
                }
            } else if (hashCode != -586683234) {
                if (hashCode == 187090231 && str.equals("audio/mp3")) {
                    c = 1;
                    if (c != 0) {
                        str = "audio/flac";
                    } else if (c == 1) {
                        str = "audio/mpeg";
                    } else if (c == 2) {
                        str = "audio/wav";
                    }
                    switch (str.hashCode()) {
                        case -2123537834:
                            if (str.equals("audio/eac3-joc")) {
                                c2 = 2;
                                break;
                            }
                            c2 = 65535;
                            break;
                        case -1662384011:
                            if (str.equals("video/mp2p")) {
                                c2 = 20;
                                break;
                            }
                            c2 = 65535;
                            break;
                        case -1662384007:
                            if (str.equals("video/mp2t")) {
                                c2 = 21;
                                break;
                            }
                            c2 = 65535;
                            break;
                        case -1662095187:
                            if (str.equals("video/webm")) {
                                c2 = '\f';
                                break;
                            }
                            c2 = 65535;
                            break;
                        case -1606874997:
                            if (str.equals("audio/amr-wb")) {
                                c2 = 6;
                                break;
                            }
                            c2 = 65535;
                            break;
                        case -1487394660:
                            if (str.equals("image/jpeg")) {
                                c2 = 24;
                                break;
                            }
                            c2 = 65535;
                            break;
                        case -1248337486:
                            if (str.equals("application/mp4")) {
                                c2 = 18;
                                break;
                            }
                            c2 = 65535;
                            break;
                        case -1079884372:
                            if (str.equals("video/x-msvideo")) {
                                c2 = 25;
                                break;
                            }
                            c2 = 65535;
                            break;
                        case -1004728940:
                            if (str.equals("text/vtt")) {
                                c2 = 23;
                                break;
                            }
                            c2 = 65535;
                            break;
                        case -387023398:
                            if (str.equals("audio/x-matroska")) {
                                c2 = 11;
                                break;
                            }
                            c2 = 65535;
                            break;
                        case -43467528:
                            if (str.equals("application/webm")) {
                                c2 = 14;
                                break;
                            }
                            c2 = 65535;
                            break;
                        case 13915911:
                            if (str.equals("video/x-flv")) {
                                c2 = '\b';
                                break;
                            }
                            c2 = 65535;
                            break;
                        case 187078296:
                            if (str.equals("audio/ac3")) {
                                c2 = 0;
                                break;
                            }
                            c2 = 65535;
                            break;
                        case 187078297:
                            if (str.equals("audio/ac4")) {
                                c2 = 3;
                                break;
                            }
                            c2 = 65535;
                            break;
                        case 187078669:
                            if (str.equals("audio/amr")) {
                                c2 = 4;
                                break;
                            }
                            c2 = 65535;
                            break;
                        case 187090232:
                            if (str.equals("audio/mp4")) {
                                c2 = 17;
                                break;
                            }
                            c2 = 65535;
                            break;
                        case 187091926:
                            if (str.equals("audio/ogg")) {
                                c2 = 19;
                                break;
                            }
                            c2 = 65535;
                            break;
                        case 187099443:
                            if (str.equals("audio/wav")) {
                                c2 = 22;
                                break;
                            }
                            c2 = 65535;
                            break;
                        case 1331848029:
                            if (str.equals("video/mp4")) {
                                c2 = 16;
                                break;
                            }
                            c2 = 65535;
                            break;
                        case 1503095341:
                            if (str.equals("audio/3gpp")) {
                                c2 = 5;
                                break;
                            }
                            c2 = 65535;
                            break;
                        case 1504578661:
                            if (str.equals("audio/eac3")) {
                                c2 = 1;
                                break;
                            }
                            c2 = 65535;
                            break;
                        case 1504619009:
                            if (str.equals("audio/flac")) {
                                c2 = 7;
                                break;
                            }
                            c2 = 65535;
                            break;
                        case 1504824762:
                            if (str.equals("audio/midi")) {
                                c2 = '\t';
                                break;
                            }
                            c2 = 65535;
                            break;
                        case 1504831518:
                            if (str.equals("audio/mpeg")) {
                                c2 = 15;
                                break;
                            }
                            c2 = 65535;
                            break;
                        case 1505118770:
                            if (str.equals("audio/webm")) {
                                c2 = '\r';
                                break;
                            }
                            c2 = 65535;
                            break;
                        case 2039520277:
                            if (str.equals("video/x-matroska")) {
                                c2 = '\n';
                                break;
                            }
                            c2 = 65535;
                            break;
                        default:
                            c2 = 65535;
                            break;
                    }
                    switch (c2) {
                        case 0:
                        case 1:
                        case 2:
                            i = 0;
                            break;
                        case 3:
                            i = 1;
                            break;
                        case 4:
                        case 5:
                        case 6:
                            i = 3;
                            break;
                        case 7:
                            i = 4;
                            break;
                        case '\b':
                            i = 5;
                            break;
                        case '\t':
                            i = 15;
                            break;
                        case '\n':
                        case 11:
                        case '\f':
                        case '\r':
                        case 14:
                            i = 6;
                            break;
                        case 15:
                            i = 7;
                            break;
                        case 16:
                        case 17:
                        case 18:
                            i = 8;
                            break;
                        case 19:
                            i = 9;
                            break;
                        case 20:
                            i = 10;
                            break;
                        case 21:
                            i = 11;
                            break;
                        case 22:
                            i = 12;
                            break;
                        case 23:
                            i = 13;
                            break;
                        case 24:
                            i = 14;
                            break;
                        case 25:
                            i = 16;
                            break;
                    }
                    if (i != -1) {
                        b(i, arrayList);
                    }
                    lastPathSegment = uri.getLastPathSegment();
                    if (lastPathSegment != null) {
                        if (!lastPathSegment.endsWith(".ac3") && !lastPathSegment.endsWith(".ec3")) {
                            if (lastPathSegment.endsWith(".ac4")) {
                                i3 = 1;
                            } else if (!lastPathSegment.endsWith(".adts") && !lastPathSegment.endsWith(".aac")) {
                                if (lastPathSegment.endsWith(".amr")) {
                                    i3 = 3;
                                } else if (lastPathSegment.endsWith(".flac")) {
                                    i3 = 4;
                                } else if (lastPathSegment.endsWith(".flv")) {
                                    i3 = 5;
                                } else {
                                    if (!lastPathSegment.endsWith(".mid") && !lastPathSegment.endsWith(".midi") && !lastPathSegment.endsWith(".smf")) {
                                        if (!lastPathSegment.startsWith(".mk", lastPathSegment.length() - 4) && !lastPathSegment.endsWith(".webm")) {
                                            if (lastPathSegment.endsWith(".mp3")) {
                                                i3 = 7;
                                            } else {
                                                if (!lastPathSegment.endsWith(".mp4") && !lastPathSegment.startsWith(".m4", lastPathSegment.length() - 4) && !lastPathSegment.startsWith(".mp4", lastPathSegment.length() - 5) && !lastPathSegment.startsWith(".cmf", lastPathSegment.length() - 5)) {
                                                    if (!lastPathSegment.startsWith(".og", lastPathSegment.length() - 4) && !lastPathSegment.endsWith(".opus")) {
                                                        if (!lastPathSegment.endsWith(".ps") && !lastPathSegment.endsWith(".mpeg") && !lastPathSegment.endsWith(".mpg") && !lastPathSegment.endsWith(".m2p")) {
                                                            if (!lastPathSegment.endsWith(".ts") && !lastPathSegment.startsWith(".ts", lastPathSegment.length() - 4)) {
                                                                if (!lastPathSegment.endsWith(".wav") && !lastPathSegment.endsWith(".wave")) {
                                                                    if (!lastPathSegment.endsWith(".vtt") && !lastPathSegment.endsWith(".webvtt")) {
                                                                        if (!lastPathSegment.endsWith(".jpg") && !lastPathSegment.endsWith(".jpeg")) {
                                                                            if (lastPathSegment.endsWith(".avi")) {
                                                                                i3 = 16;
                                                                            }
                                                                        }
                                                                        i3 = 14;
                                                                    }
                                                                    i3 = 13;
                                                                }
                                                                i3 = 12;
                                                            }
                                                            i3 = 11;
                                                        }
                                                        i3 = 10;
                                                    }
                                                    i3 = 9;
                                                }
                                                i3 = 8;
                                            }
                                        }
                                        i3 = 6;
                                    }
                                    i3 = 15;
                                }
                            }
                            int[] iArr22 = Q;
                            for (i2 = 0; i2 < 16; i2++) {
                                int i4 = iArr22[i2];
                                if (i4 != i && i4 != i3) {
                                    b(i4, arrayList);
                                }
                            }
                        }
                        i3 = 0;
                        int[] iArr222 = Q;
                        while (i2 < 16) {
                        }
                    }
                    i3 = -1;
                    int[] iArr2222 = Q;
                    while (i2 < 16) {
                    }
                }
                c = 65535;
                if (c != 0) {
                }
                switch (str.hashCode()) {
                    case -2123537834:
                        break;
                    case -1662384011:
                        break;
                    case -1662384007:
                        break;
                    case -1662095187:
                        break;
                    case -1606874997:
                        break;
                    case -1487394660:
                        break;
                    case -1248337486:
                        break;
                    case -1079884372:
                        break;
                    case -1004728940:
                        break;
                    case -387023398:
                        break;
                    case -43467528:
                        break;
                    case 13915911:
                        break;
                    case 187078296:
                        break;
                    case 187078297:
                        break;
                    case 187078669:
                        break;
                    case 187090232:
                        break;
                    case 187091926:
                        break;
                    case 187099443:
                        break;
                    case 1331848029:
                        break;
                    case 1503095341:
                        break;
                    case 1504578661:
                        break;
                    case 1504619009:
                        break;
                    case 1504824762:
                        break;
                    case 1504831518:
                        break;
                    case 1505118770:
                        break;
                    case 2039520277:
                        break;
                }
                switch (c2) {
                }
                if (i != -1) {
                }
                lastPathSegment = uri.getLastPathSegment();
                if (lastPathSegment != null) {
                }
                i3 = -1;
                int[] iArr22222 = Q;
                while (i2 < 16) {
                }
            } else {
                if (str.equals("audio/x-wav")) {
                    c = 2;
                    if (c != 0) {
                    }
                    switch (str.hashCode()) {
                        case -2123537834:
                            break;
                        case -1662384011:
                            break;
                        case -1662384007:
                            break;
                        case -1662095187:
                            break;
                        case -1606874997:
                            break;
                        case -1487394660:
                            break;
                        case -1248337486:
                            break;
                        case -1079884372:
                            break;
                        case -1004728940:
                            break;
                        case -387023398:
                            break;
                        case -43467528:
                            break;
                        case 13915911:
                            break;
                        case 187078296:
                            break;
                        case 187078297:
                            break;
                        case 187078669:
                            break;
                        case 187090232:
                            break;
                        case 187091926:
                            break;
                        case 187099443:
                            break;
                        case 1331848029:
                            break;
                        case 1503095341:
                            break;
                        case 1504578661:
                            break;
                        case 1504619009:
                            break;
                        case 1504824762:
                            break;
                        case 1504831518:
                            break;
                        case 1505118770:
                            break;
                        case 2039520277:
                            break;
                    }
                    switch (c2) {
                    }
                    if (i != -1) {
                    }
                    lastPathSegment = uri.getLastPathSegment();
                    if (lastPathSegment != null) {
                    }
                    i3 = -1;
                    int[] iArr222222 = Q;
                    while (i2 < 16) {
                    }
                }
                c = 65535;
                if (c != 0) {
                }
                switch (str.hashCode()) {
                    case -2123537834:
                        break;
                    case -1662384011:
                        break;
                    case -1662384007:
                        break;
                    case -1662095187:
                        break;
                    case -1606874997:
                        break;
                    case -1487394660:
                        break;
                    case -1248337486:
                        break;
                    case -1079884372:
                        break;
                    case -1004728940:
                        break;
                    case -387023398:
                        break;
                    case -43467528:
                        break;
                    case 13915911:
                        break;
                    case 187078296:
                        break;
                    case 187078297:
                        break;
                    case 187078669:
                        break;
                    case 187090232:
                        break;
                    case 187091926:
                        break;
                    case 187099443:
                        break;
                    case 1331848029:
                        break;
                    case 1503095341:
                        break;
                    case 1504578661:
                        break;
                    case 1504619009:
                        break;
                    case 1504824762:
                        break;
                    case 1504831518:
                        break;
                    case 1505118770:
                        break;
                    case 2039520277:
                        break;
                }
                switch (c2) {
                }
                if (i != -1) {
                }
                lastPathSegment = uri.getLastPathSegment();
                if (lastPathSegment != null) {
                }
                i3 = -1;
                int[] iArr2222222 = Q;
                while (i2 < 16) {
                }
            }
        }
        i = -1;
        if (i != -1) {
        }
        lastPathSegment = uri.getLastPathSegment();
        if (lastPathSegment != null) {
        }
        i3 = -1;
        int[] iArr22222222 = Q;
        while (i2 < 16) {
        }
        return (lk1[]) arrayList.toArray(new lk1[arrayList.size()]);
    }

    public final void b(int i, ArrayList arrayList) {
        lk1 qr1Var;
        switch (i) {
            case 0:
                qr1Var = new qr1();
                break;
            case 1:
                qr1Var = new sr1();
                break;
            case 2:
                qr1Var = new ur1();
                break;
            case 3:
                qr1Var = new vl1();
                break;
            case 4:
                lk1 a = R.a(0);
                if (a != null) {
                    arrayList.add(a);
                    return;
                } else {
                    qr1Var = new rm1();
                    break;
                }
            case 5:
                qr1Var = new tm1();
                break;
            case 6:
                qr1Var = new op1();
                break;
            case 7:
                qr1Var = new up1(0);
                break;
            case 8:
                arrayList.add(new rq1());
                qr1Var = new vq1();
                break;
            case 9:
                qr1Var = new hr1();
                break;
            case 10:
                qr1Var = new zs1();
                break;
            case 11:
                if (this.P == null) {
                    lv4 lv4Var = nv4.Q;
                    this.P = nw4.T;
                }
                qr1Var = new mt1(new km4(), new wr1(this.P));
                break;
            case 12:
                qr1Var = new vt1();
                break;
            case 13:
            default:
                return;
            case 14:
                qr1Var = new xm1();
                break;
            case 15:
                lk1 a2 = S.a(new Object[0]);
                if (a2 != null) {
                    arrayList.add(a2);
                    return;
                }
                return;
            case 16:
                qr1Var = new hm1();
                break;
        }
        arrayList.add(qr1Var);
    }
}